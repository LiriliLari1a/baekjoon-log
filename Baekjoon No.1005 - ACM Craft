# Baekjoon No.1005 - ACM Craft

- [문제 링크](https://www.acmicpc.net/problem/1005)


## 문제 설명 Problem Description
첫째 줄에는 테스트케이스의 개수 T가 주어진다. 각 테스트 케이스는 다음과 같이 주어진다. 첫째 줄에 건물의 개수 N과 건물간의 건설순서 규칙의 총 개수 K이 주어진다. (건물의 번호는 1번부터 N번까지 존재한다) 
둘째 줄에는 각 건물당 건설에 걸리는 시간 D1, D2, ..., DN이 공백을 사이로 주어진다. 셋째 줄부터 K+2줄까지 건설순서 X Y가 주어진다. (이는 건물 X를 지은 다음에 건물 Y를 짓는 것이 가능하다는 의미이다) 
마지막 줄에는 백준이가 승리하기 위해 건설해야 할 건물의 번호 W가 주어진다.
건물 W를 건설완료 하는데 드는 최소 시간을 출력한다. 편의상 건물을 짓는 명령을 내리는 데는 시간이 소요되지 않는다고 가정한다.
건설순서는 모든 건물이 건설 가능하도록 주어진다.

You are given a series of test cases. For each test case:
The first line contains two integers, N (number of buildings) and K (number of construction order rules).
The second line contains N integers D1, D2, ..., DN, where Di is the time it takes to build building i.
The next K lines contain pairs X Y, indicating that building X must be completed before building Y can begin.
The final line contains an integer W, the target building that must be completed.
Your task is to determine the minimum time required to complete construction of building W, considering all dependencies. Assume that issuing construction commands takes no time.
It's guaranteed that all buildings can be constructed (i.e., the graph is a Directed Acyclic Graph).


## 생각 과정 Thought Process
1. ** DFS **
처음에는 이 문제를 DFS로 접근하려 했다. 왜냐하면 선행되어야 하는 건물이 많을 지라도 결과적으로 선행되어야 하는 건물중 가장 오래 걸리는 루트가 최종적으로 건설에 걸리는 시간이기 때문이었다.
선행되어야 하는 건물 정보를 역순으로 딕셔너리에 저장하고 목표 건물 부터 선행 되어야 하는 건물이 없는 건물, 즉 딕셔너리의 해당 키 값이 빈 곳까지 DFS 를 실행 한 후 목표 건물에 도달하면 스택에 추가하지 않고 그 결과중 가장 높은 값을 출력하도록 했다.
예제 정답은 모두 정상적으로 출력 되어서 자신감 있게 제출했으나 시간초과로 인해 오답처리되었다.

2. ** DP **
이문제를 DP 만으로도 접근 해 보았다. 역순으로 저장된 딕셔너리는 그대로 두고 점화식을 세워 목표 건물 부터 첫 건물까지. 하지만 이것도 시간초과로 오답처리 되었다.

3. ** DP + 위상 정렬 + BFS(구조 활용) **
위상 정렬은 인터넷의 도움을 좀 받았다. 여러 경우를 생각해보면서 문득 떠올랐던 방법이지만 사용하지 않았던 방법이었다. 사실 내가 생각했던 방법보다 조금 가볍게 사용하였다. 
선행 건물 bool 리스트를 작성하여 지어짐 여부를 관리해야 하나 생각했었지만 도움을 받은 방법은 선행되어야 하는 건물 개수만을 세었다.
여기에 dp 와 BFS 의 구조를 활용하여 진입차수 리스트로 건물 건설 가능 여부를 관리하고 queue에 지을 수 있는 건물을 넣었다. 이를 반복하며 더 큰 시간이 발생하는 경로가 있으면 dp 점화식으로 업데이트 했다.

1. ** DFS **
At first, I approached the problem using DFS. My reasoning was that even if many prerequisite buildings exist, only the longest path among them affects the total construction time.
I reversed the dependency graph and performed DFS from the target building back to the source buildings (those with no prerequisites). The idea was to track and return the longest path, and it worked correctly on sample test cases. However, it resulted in a time limit exceeded (TLE) error upon submission.

2. ** DP **
I also tried solving the problem with DP alone. I kept the reversed graph and attempted to fill out the required time from the target building back to the start using a recursive DP approach. Unfortunately, this too resulted in a TLE due to excessive recursive calls.

3. ** DP + Topological Sort + BFS (Structure) **
Eventually, I solved the problem using topological sorting combined with DP and a BFS-like structure.
Although I had considered this method earlier, I initially dismissed it. With help from online resources, I learned that it's enough to track the number of prerequisites (in-degree) instead of maintaining a boolean list for each building.
Using this, I added buildings with zero in-degree to a queue, then processed them using a BFS-like approach.
At each step, I updated the construction time using a DP recurrence relation, always choosing the maximum time among possible paths.
This method worked efficiently and passed all test cases.


##코드 설명 Code

```python
import sys
from collections import deque

input = sys.stdin.readline

T = int(input())

for _ in range(T):
  N, K = map(int, input().split())
  weight = [0] + list(map(int, input().split()))    # 건물 건설 시간
  building = { i : [] for i in range(1, N + 1) }    # 선행 건물 정보 딕셔너리
  indegree = [0] * (N + 1)                          # 진입차수 리스트
  dp = [-1] * (N + 1)                               # 동적 계획법 리스트

  # 선행 건물 정보 입력
  for i in range(K):
    a, b = map(int, input().split())
    building[a].append(b)
    indegree[b] += 1

  end = int(input())

  # 선행 건물이 없는 건물 dp에 저장
  queue = deque([])
  for i in range(1, N + 1):
    if indegree[i] == 0:
      dp[i] = weight[i]
      queue.append(i)

  # dp + 위상정렬
  while queue:
    current = queue.popleft()
    for next in building[current]:
      indegree[next] -= 1     # current 지어짐 -> next에 필요한 선행건물 한개 제거
      dp[next] = max(dp[next], dp[current] + weight[next])   # 더 큰 시간이 발생하는 경로 있으면 비용 저장
      if indegree[next] == 0:      # 진입 차수 == 0 -> 건설 가능
        queue.append(next)

  print(dp[end])


## 예시 입력 Sample Input
5
3 2
1 2 3
3 2
2 1
1
4 3
5 5 5 5
1 2
1 3
2 3
4
5 10
100000 99999 99997 99994 99990
4 5
3 5
3 4
2 5
2 4
2 3
1 5
1 4
1 3
1 2
4
4 3
1 1 1 1
1 2
3 2
1 4
4
7 8
0 0 0 0 0 0 0
1 2
1 3
2 4
3 4
4 5
4 6
5 7
6 7
7

## 예시 출력 Sample Output
6
5
399990
2
0


## 마무리 Conclusion or Reflection
처음에 너무 얕봤다. 그래서 큰코 다쳤다. 풀만한 다양한 방법이 떠올라 머릿속에 있던 거의 모든 방법을 사용해봤는데 실패해서 도움을 받게 된 경우는 처음이었다. 혼자 고심해서 풀었으면 오늘안에 풀지 못할 뻔했는데 생각보다 간단한 방법으로 풀려서 허탈했다.
다음부턴 조금더 의심하고 들어가 보는 습관을 들여야 할 것 같다.

At first, I underestimated the problem — and it came back to bite me. I tried almost every approach that came to mind, but none worked, and for the first time, I had to rely on external help.
If I had insisted on solving it alone, I probably wouldn't have finished it today. Ironically, the solution turned out to be much simpler than I expected, which left me feeling a bit empty.
Next time, I’ll make it a habit to approach problems more cautiously and question my assumptions early on.
