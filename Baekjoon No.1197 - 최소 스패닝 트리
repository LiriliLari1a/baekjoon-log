# Baekjoon No.1197 - 최소 스패닝 트리

- [문제 링크](https://www.acmicpc.net/problem/1197)

## 문제 설명 Problem Description
첫째 줄에 정점의 개수 V(1 ≤ V ≤ 10,000)와 간선의 개수 E(1 ≤ E ≤ 100,000)가 주어진다.
다음 E개의 줄에는 각 간선에 대한 정보를 나타내는 세 정수 A, B, C가 주어진다.
이는 A번 정점과 B번 정점이 가중치 C인 간선으로 연결되어 있다는 의미이다. C는 음수일 수도 있으며, 절댓값이 1,000,000을 넘지 않는다.
그래프의 정점은 1번부터 V번까지 번호가 매겨져 있고, 임의의 두 정점 사이에 경로가 있다.
최소 스패닝 트리의 가중치가 -2,147,483,648보다 크거나 같고, 2,147,483,647보다 작거나 같은 데이터만 입력으로 주어진다.
첫째 줄에 최소 스패닝 트리의 가중치를 출력한다.

The first line contains two integers, V and E (1 ≤ V ≤ 10,000, 1 ≤ E ≤ 100,000), representing the number of vertices and edges, respectively.
The next E lines each contain three integers A, B, and C, indicating that there is an edge with weight C between vertex A and vertex B.
Note that C can be negative and its absolute value does not exceed 1,000,000.
The graph's vertices are numbered from 1 to V, and there is a path between any pair of vertices.
The total weight of the minimum spanning tree (MST) will be greater than or equal to -2,147,483,648 and less than 2,147,483,647.
Print a single integer: the total weight of the minimum spanning tree.

## 생각 과정 Thought Process
1. ** 트리 구성 - 1 **
처음에는 트리구성을 어떻게 해야 할지 잠깐 고민을 했다. 필요없는 간선을 제거할지, 아니면 주어진 간선중에 선택하는 방향으로 할지,
결국에는 스패닝 트리를 만들 간선을 하나하나 직접 선택하는 방향으로 트리를 구성하기로 했다.
방향은 중요하지 않으므로 방향은 신경쓰지 않았다.
그렇게 하기위해선 가중치를 정렬하여 가중치가 가장 작은 것 부터 선택 하는 하는 것부터 시작해야 했다.
visited 리스트를 이용하여 순환 구조가 생기지 않도록 가중치가 작은 것부터 선택하여 selected 리스트에 weight 정보를 저장했다.
(weight 에서는 deque를 사용했는데 pop 한후 사용하지 않으면 다시 append 하고 사용하면 다시 쓸일 없으니 최적화를 위해 버렸다)
이 처리 과정 만으론 완벽한 트리구조가 만들어지지 않았다. 



2. ** 트리 구성 - 2 **
반례를 입력해서 파악했는데 마치 소도시들이 서로 도로로 연결되지 않은 것 처럼 이미 방문 했으나
작게 묶여 임의의 노드에서 갈 수 없는 노드가 생기는 경우가 나타났다.
그래서 이 소도시를 그룹의 묶음으로 만들어 서로를 이어줄 고속도로를 만들어야겠다는 생각을 했다.
구현이 생각보다 복잡했다. BFS를 사용해 도달 가능한 노드들을 그룹으로 묶고, 이들을 group 리스트에 추가하였다.
또한, **트리의 성질(간선 수 = 노드 수 - 1)**을 이용해, 필요한 간선의 개수를 계산하였다.
정렬된 weight 큐에서 간선을 하나씩 꺼내며, 해당 간선의 양 끝 노드가 서로 다른 그룹에 속하는 경우
간선을 selected에 추가하고 두 그룹을 병합하였다. 이 과정을 필요한 간선의 수만큼 반복하여, 스패닝 트리를 완성하였다.

1. ** Tree construction - 1**
Edges were selected in ascending order of weight, using a visited list to avoid forming cycles.
Valid edges were stored in the selected list.

2. ** Tree construction - 2 **
BFS was used to group all reachable nodes from a starting node, and each group was stored in the group list.
Using the property of a tree that the number of edges = number of nodes - 1,
the number of additional edges required was calculated.
Then, for each remaining edge in the sorted weight queue, if the edge connected nodes from different groups,
it was added to the selected list, and the groups were merged.
This process was repeated until all required edges were added to form the minimum spanning tree.

##코드 설명 Code

```python
from collections import deque

# 너비우선탐색으로 visited 리스트와 start 노드로 닿을수 있는 노드들을 반환
def bfs(start, bfs_visited):
  group = []
  queue = deque([start])
  bfs_visited[start] = True
  group.append(start)
  while queue:
    v = queue.popleft()
    for w, direct in Tree[v]:
      if not bfs_visited[direct]:
        queue.append(direct)
        bfs_visited[direct] = True
        group.append(direct)
  return bfs_visited, group

V, E = map(int, input().split())
Tree = { i : [] for i in range(1, V + 1) }
weight = []
bfs_visited = [False] * (V + 1)
bfs_visited[0] = True
visited = [False] * (V + 1)
selected = [] # 트리에 선택된 간선의 가중치 리스트

# 가중치 리스트에 저장
for i in range(E):
  A, B, C = map(int, input().split())
  weight.append((C, A, B))

# 가중치 정렬 및 최적화 위해 deque 사용
weight.sort(key = lambda x: x[0])
weight = deque(weight)

# 가장 가중치 낮은 것들을 선택해 간선 선택 - 트리 구조 유지를 위해 visited 사용
for i in range(len(weight)):
  v = weight.popleft()
  w, a, b = v
  if visited[a] and visited[b]:
    weight.append((v))
    continue
  selected.append(w)
  Tree[a].append((w, b))
  Tree[b].append((w, a))
  visited[a], visited[b] = True, True

# 간선 = 노드 - 1 트리의 성질 이용해서 간선의 필요개수 계산
diff = V - len(selected)
# 간선으로 연결된 노드 끼리 묶은 그룹 리스트 만들기
# 마치 도로로 연결되지 않은 소도시들의 묶음처럼
group = []
for i in range(diff):
  for j in range(V + 1):
    if not bfs_visited[j]:
      start = j
      break
  bfs_visited, g = bfs(start, bfs_visited)
  group.append(g)

# 같은 그룹인지 감지하는 변수
temp_a = 0
temp_b = 0
# 간선이 필요한 만큼 추가
for i in range(diff):
  m = len(weight)
  # weight의 길이가 변할 수 있으므로 안전하게 저장후 탐색
  for j in range(m):
    v = weight.popleft()
    w, a, b = v
    # 서로 다른 그룹이면 그룹 합치고 트리에 선택된 간선으로 추가
    for k in range(len(group)):
      if a in group[k]:
        temp_a = k
      if b in group[k]:
        temp_b = k
    if temp_a == temp_b:
      weight.append(v)
      continue
    merged = group[temp_a] + group[temp_b]
    del group[temp_a]
    if temp_a < temp_b:
      temp_b -= 1
    del group[temp_b]
    group.append(merged)
    selected.append(w)
    break

# 결괏값 출력
result = 0
for item in selected:
  result += item
print(result)


## 예시 입력 Sample Input
10 21
1 2 3
1 4 6
1 5 9
2 3 2
2 4 4
2 5 9
2 6 9
3 4 2
3 6 8
3 7 9
4 7 9
5 6 8
5 10 18
6 7 7
6 9 9
6 10 10
7 8 4
7 9 5
8 9 1
8 10 4
9 10 3

## 예시 출력 Sample Output
38

## 마무리 Conclusion or Reflection
어떻게 할지 생각 하는것은 오래걸리지 않았으나 구현이 오래걸렸다. 한번 고쳐내는 과정에서 코드가 길어지다 보니 조금 코드가 복잡하고 길다.
추가 공부를 위해 질문게시판을 보던중 유니온 파인드라는 방법도 있었는데 이걸 알아보고 썼으면 몸은 편했겠으나 이 복잡한 코드를
직접 구현해 내고 정답을 맞췄을 때 얻는 희열은 느끼지 못했을 것이다. 유니온 파인드는 얼마나 편할지 공부를 해보아야 할 것 같다.
구현하는 과정에서 코드가 복잡하다보니 시간복잡도 때문에 고민을 많이 했는데 최악의 경우 O(E log E + V^2)이라 pypy3로 제출했다.
오랜만에 재밌는 코딩을 한것 같아 정말 즐거웠다.

It didn’t take long to come up with the idea, but the implementation took quite a while.
As I went through the process of fixing and adjusting things, the code gradually became longer and more complex.
While looking through the Q&A board for further study, I came across the Union-Find method.
Had I known about it and used it, things would have been easier—but
I wouldn't have experienced the satisfaction of building and solving this complex code from scratch
