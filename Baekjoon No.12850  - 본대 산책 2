# Baekjoon No.12850  - 본대 산책 2

- [문제 링크](https://www.acmicpc.net/problem/12850)

## 문제 설명 Problem Description
한 건물에서 바로 인접한 다른 건물로 이동 하는 데 1분이 걸린다. 준영이는 산책 도중에 한번도 길이나 건물에 멈춰서 머무르지 않는다. 
준영이는 할 일이 많아서 딱 D분만 산책을 할 것이다. (산책을 시작 한 지 D분 일 때, 정보 과학관에 도착해야 한다.) 이때 가능한 경로의 경우의 수를 구해주자.
D 가 주어진다 (1 ≤ D ≤ 1,000,000,000) 
가능한 경로의 수를 1,000,000,007로 나눈 나머지를 출력한다.
(자세한 문제 링크 참조)

It takes 1 minute to move from one building to an adjacent building. Junyoung never stops or stays at any point along the way during the walk.
Since Junyoung is very busy, he will walk for exactly D minutes. (At exactly D minutes after starting, he must arrive at the Information Science Building.)
Your task is to calculate the number of possible paths he can take.
You are given D (1 ≤ D ≤ 1,000,000,000).
Print the number of possible paths modulo 1,000,000,007.
(Refer to the original problem description for detailed information.)


## 생각 과정 Thought Process
1. ** 그래프 구현 **
일단 모든 접근 가능한 건물에 대해 고유한 번호(0 ~ 7)을 매기고 접근 가능한 곳을 그래프로 연결 했다.

2. ** 분할 정복 **
분할 정복 문제를 오랜만에 다뤄서 조금 찾아가며 공부했다.
일단 미리 1분만에 접근 가능한 건물에 대해 만들어 놓은 그래프를 8x8 매트릭스로 변형시켰다.
그후 행렬곱 함수를 만들어 모듈러연산과 함께 접근 가능한 경로의 수를 계산했다.
matpow() 함수에선 분할 정복을 이용하여 O(logN)으로 경우의 수를 구했다

1. ** Graph Implementation **
First, I assigned a unique number (0 to 7) to each building that can be accessed. 
I then constructed the graph by connecting nodes based on the given accessibility information.

2. ** Divide and Conquer **
Since I hadn’t solved divide and conquer problems for a while, I reviewed how it works again before proceeding.
I converted the graph into an 8x8 adjacency matrix, representing whether each building can be reached in 1 minute.
Then, I implemented a matrix multiplication function that performs multiplication with modulo operations to handle the count of possible paths.
For the matpow() function, I applied divide and conquer to calculate the number of paths in O(log D) time by recursively squaring the matrix.


##코드 설명 Code

```python
MOD = 1000000007
# 행렬 곱
def matmult(a, b):
    n = len(a)
    result = [[0] * n for _ in range(n)]

    for i in range(n):
        for j in range(n):
            for k in range(n):
                result[i][j] = (result[i][j] + a[i][k] * b[k][j]) % MOD
    return result

# 제곱을 이용한 분할 정복
def matpow(matrix, power):
    n = len(matrix)
    result = [[0] * n for _ in range(n)]
    for i in range(n):
        result[i][i] = 1
    while power > 0:
        if power % 2 == 1:
            result = matmult(result, matrix)
        matrix = matmult(matrix, matrix)
        power //= 2
    return result[0][0]

# 1분으로 접근 가능한 건물을 연결
graph = {
    0 : [1, 2],
    1 : [0, 2, 3],
    2 : [0, 1, 3, 4],
    3 : [1, 2, 4, 5],
    4 : [2, 3, 5, 7],
    5 : [3, 4, 6],
    6 : [5, 7],
    7 : [4, 6]
}

D = int(input())
matrix = [[0] * len(graph) for _ in range(len(graph))]

# 그래프를 기반으로 행렬 작성
for i in range(len(graph)):
   for d in graph[i]:
      matrix[i][d] = 1

print(matpow(matrix, D))


## 예시 입력 Sample Input
1247162784

## 예시 출력 Sample Output
498961154


## 마무리 Conclusion or Reflection
분할정복을 오랜만에 다뤄봐서 다시 리마인딩 되었다. 
이전에도 많이 다뤄본 알고리즘은 아니어서 이해하는데에 조금 시간이 걸렸지만 기본적인 분할정복이어서 어렵게 기억되진않는다.

It has been a while since I last dealt with divide and conquer problems, so this served as a good refresher.
Although I’m not very familiar with this technique yet, the problem itself used a very basic form of divide and conquer,
so it wasn’t too difficult to understand once I recalled the principle.
