# Baekjoon No.14003 - 가장 긴 증가하는 부분 수열 5

- [문제 링크](https://www.acmicpc.net/problem/14003)


## 문제 설명 Problem Description
첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000,000)이 주어진다.
둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (-1,000,000,000 ≤ Ai ≤ 1,000,000,000)
첫째 줄에 수열 A의 가장 긴 증가하는 부분 수열의 길이를 출력한다.
둘째 줄에는 정답이 될 수 있는 가장 긴 증가하는 부분 수열을 출력한다.

The first line contains an integer N — the size of sequence A.
(1 ≤ N ≤ 1,000,000)
The second line contains N integers A₁, A₂, ..., Aₙ — the elements of the sequence A.
Each element satisfies: -1,000,000,000 ≤ Aᵢ ≤ 1,000,000,000
Print the length of the longest increasing subsequence of sequence A on the first line.
On the second line, print one possible longest increasing subsequence.


## 생각 과정 Thought Process
1. ** 이분탐색 **
이분탐색을 이용한 DP를 사용해서 LIS의 길이를 먼저 구하면서 경로까지 저장하기로 생각했다.
이분탐색을 이용한 DP 는 O(NlogN) 으로 시간안으로 구할수 있었다.

2. ** 역추적 **
이분탐색으로 LIS의 길이와 경로를 구하였으므로 마지막 인덱스부터 경로를 역추적하여 원래의 LIS 를 구하였다.

1. ** Binary Search **
I decided to use dynamic programming with binary search to first compute the length of the LIS while also storing the path.
Since binary search-based DP runs in O(N log N) time, I was able to solve it within the time constraints.

2. ** Backtracking **
After computing the length and path of the LIS using binary search, I performed backtracking from the end to reconstruct the actual LIS sequence.


##코드 설명 Code

```python
import bisect

N = int(input())

numbers = list(map(int, input().split()))
pos = [-1] * N      # 경로 저장
dp = []

# 이분탐색을 이용하여 LIS의 길이를 구함
for i in range(N):
    number = numbers[i]
    idx = bisect.bisect_left(dp, number)
    if idx == len(dp):
        dp.append(number)
    else:
        dp[idx] = number
    pos[i] = idx

# 역추적을 이용하여 실제 LIS 배열을 구함
length = len(dp) - 1
result = []
for i in range(len(numbers) - 1, -1, -1):
    if pos[i] == length:
        result.append(numbers[i])
        length -= 1

result.reverse()
# 출력
print(len(result))
for item in result:
    print(item, end = " ")


## 예시 입력 Sample Input
6
10 20 10 30 20 50

## 예시 출력 Sample Output
4
10 20 30 50


## 마무리 Conclusion or Reflection
쉬운 문제였다. 수열에 관한 DP와 역추적은 많이 다뤄봐서 플레티넘 문제가 맞는지 싶을정도로 술술 풀었다.

It was an easy problem. I've practiced DP and backtracking on sequences many times before, 
so this problem felt surprisingly straightforward—even to the point where I wondered if it truly deserved its Platinum tier rating.
