# Baekjoon No.1509 - 팰린드롬 분할

- [문제 링크](https://www.acmicpc.net/problem/1509)

## 문제 설명 Problem Description
ABACABA를 팰린드롬으로 분할하면, {A, B, A, C, A, B, A}, {A, BACAB, A}, {ABA, C, ABA}, {ABACABA}등이 있다.
분할의 개수의 최솟값을 출력하는 프로그램을 작성하시오.
첫째 줄에 문자열이 주어진다. 이 문자열은 알파벳 대문자로만 이루어져 있고, 최대 길이는 2,500이다.
첫째 줄에 팰린드롬 분할의 개수의 최솟값을 출력한다.

You are given a string consisting of uppercase English letters. Your task is to divide the string into a sequence of substrings, such that each substring is a palindrome.
Among all possible ways to divide the string this way, find the minimum number of cuts required.
A single line containing a string S (1 ≤ |S| ≤ 2500), consisting only of uppercase letters 'A' to 'Z'.
Output a single integer: the minimum number of cuts needed to partition the input string into palindromic substrings.


## 생각 과정 Thought Process
1. ** 직접 구하기 **
직접 팰린드롬을 구해서 가장 큰 팰린드롬 부터 순서대로 적용시켜 수열의 길이에서 빼서 계산 하려했으나 시간초과등의 이유로 하지 않았다.

2. ** 동적 계획법 **
적절한 아이디어가 생각나지 않아 GPT의 도움을 받았다. 조금 DP 설계 과정과 동작 이해가 쉽진 않았다.

1. ** Brute Force Attempt **
At first, I tried to manually find all palindromic substrings and apply the largest ones first to subtract from the total length and calculate the answer.
However, I abandoned this approach due to time complexity issues.

2. ** Dynamic Programming **
Since I couldn't come up with a solid idea, I sought help from GPT. Even then, understanding the design and behavior of the DP solution wasn’t easy.


##코드 설명 Code

```python
palindrome = list(input())
n = len(palindrome)
is_pal = [[False] * n for _ in range(n)]    # is_pal[a][b] == True 이면 a부터 b까지 팰린드롬
dp = [0] * n

for i in range(n):
  divide = i
  for j in range(i + 1):
    if palindrome[i] == palindrome[j] and (i - j <= 1 or is_pal[j + 1][i - 1]):
      is_pal[j][i] = True
      divide = 0 if j == 0 else min(dp[j - 1] + 1, divide)
  dp[i] = divide

print(dp[-1] + 1)


## 예시 입력 Sample Input
QWERTYTREWQWERT

## 예시 출력 Sample Output
5

## 마무리 Conclusion or Reflection
사실 어떻게 풀지 감을 못잡은 문제였다. 특히나 DP는 더더욱 생각하지 못했던 문제였는데 이해하는데에도 쉽지 않았던 문제였다.
DP에 점점 익숙해지고는 있는데 이렇게 치밀하게 짜여진 DP는 아직 어려운것 같다.

To be honest, I had no idea how to approach this problem at first—especially not with DP. It was quite difficult for me to even grasp the concept behind it.
Although I’m gradually getting more familiar with dynamic programming, this kind of tightly constructed and meticulous DP logic still feels challenging.
