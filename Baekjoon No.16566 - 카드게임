# Baekjoon No.16566 - 카드게임

- [문제 링크](https://www.acmicpc.net/problem/16566)


## 문제 설명 Problem Description
N개의 빨간색 카드가 있다. 각각의 카드는 순서대로 1부터 N까지 번호가 매겨져 있다. 이 중에서 M개의 카드를 고른다.
N개의 파란색 카드가 있다. 각각의 카드는 순서대로 1부터 N까지 번호가 매겨져 있다. 이 중에서 빨간색에서 고른 번호와 같은 파란색 카드 M개를 고른다.
철수는 빨간색 카드를 가지고 민수는 파란색 카드를 가진다.
철수와 민수는 고른 카드 중에 1장을 뒤집어진 상태로 낸다. 그리고 카드를 다시 뒤집어서 번호가 큰 사람이 이긴다. 이 동작을 K번 해서 더 많이 이긴 사람이 최종적으로 승리한다. 한 번 낸 카드는 반드시 버려야 한다.
철수는 뛰어난 마술사이기 때문에 본인이 낼 카드를 마음대로 조작할 수 있다. 즉, 카드를 버리고 민수 몰래 다시 들고 온다거나 민수한테 없는 카드를 내기도 한다.
민수는 뛰어난 심리학자이기 때문에 철수가 낼 카드를 알아낼 수 있다. 그래서 민수는 철수가 낼 카드보다 큰 카드가 있다면 그 카드들 중 가장 작은 카드를 내기로 했다.
K번 동안 철수가 낼 카드가 입력으로 주어진다. 그렇다면 민수가 어떤 카드를 낼지 출력하라. 단, 민수가 카드를 내지 못하는 경우는 없다고 가정한다.
첫째 줄에 세 개의 자연수 N, M, K가 주어진다. (1 ≤ M ≤ N ≤ 4,000,000, 1 ≤ K ≤ min(M, 10,000))
다음 줄에 카드의 번호를 나타내는 M개의 자연수가 주어진다. 각각의 수들은 1 이상이고 N 이하이며 서로 다르다.
다음 줄에 K개의 자연수가 주어진다. i번째 수는 철수가 i번째로 내는 카드의 번호이다. 철수가 내는 카드 역시 1 이상 N 이하이다.
K줄에 걸쳐서 수를 출력한다. i번째 줄에는 민수가 i번째로 낼 카드의 번호가 출력되어야 한다.

There are N red cards, each numbered from 1 to N. Among these, M cards are selected.
There are also N blue cards, each numbered from 1 to N. Among these, the same numbers as the selected red cards are chosen, so there are M blue cards.
Cheolsu holds the red cards, and Minsu holds the blue cards.
Both players play by choosing one card from their hand, placing it face down, and then flipping it. The player with the larger number wins. This action is repeated K times. Once a card has been played, it is discarded and cannot be used again.
Cheolsu is a master magician, so he can manipulate his own cards freely. That is, he can discard cards and bring them back secretly, or play a card that Minsu doesn’t even own.
However, Minsu is a brilliant psychologist, so he can predict what card Cheolsu will play. Therefore, Minsu’s strategy is simple: if he has any card greater than Cheolsu’s card, he will play the smallest such card.
This game is played K times, and you are given the cards that Cheolsu will play in order. For each of Cheolsu’s plays, output the card that Minsu will play.
It is guaranteed that Minsu will always have a valid card to play.
The first line contains three integers N, M, K.
(1 ≤ M ≤ N ≤ 4,000,000, 1 ≤ K ≤ min(M, 10,000))
The second line contains M distinct integers representing the numbers of the selected blue cards.
Each number is between 1 and N, and all numbers are distinct.
The third line contains K integers representing the numbers of the cards Cheolsu will play in order.
Each number is between 1 and N.
Output K lines. For the i-th line, print the number of the card Minsu will play in response to Cheolsu’s i-th card.


## 생각 과정 Thought Process
1. ** 카드 사용 처리 **
사용할 카드는 정렬 후 이분탐색으로 찾으면 되지만 카드를 어떻게 사용을 처리해야 할지 고민을 해보았다. 
visited 배열을 사용하려 했지만 사용한 카드가 많아지면 for 루프로 처리될것이기에 시간초과가 날것이 뻔했다.
그래서 처음엔 정렬된 크기의 카드가 연속적으로 사용되었을때 이것을 묶어 바로 다음 사용할 수 있는 카드를 사용해야겠다고 생각했다.
그 후 조금 정제하여 카드를 묶기보다 유니온 파인드로 다음 사용할 수 있는 카드로 경로 압축을 하기로 했다.

2. ** 유니온-파인드 **
메인 함수에서 bisect_right() 로 주어진 수보다 큰수중에서 가장 작은 수를 선택하고 result 변수에 find()로 사용 가능한 카드를 찾아 출력했다.
그후 사용 가능한 그 카드와 그 카드보다 큰수중에서 가장 작은 수의 카드를 union() 했다.

1. ** Card Usage Processing **
To determine which cards to use, I considered using binary search on the sorted cards. However, I wasn’t sure how to efficiently mark cards as "used."
At first, I thought about using a visited array, but as more cards are used, this would eventually require iterating with a for loop, leading to obvious time complexity issues.
So initially, I considered grouping consecutively used cards and directly moving to the next available card.
Later, I refined this idea further: rather than grouping, I decided to use Union-Find with path compression to efficiently jump to the next available card.

2. ** Union-Find **
In the main function, I used bisect_right() to find the smallest card greater than the given number.
Then, I used find() on the result to locate the next available card and printed it.
After using the card, I performed a union() between the used card and the next greater card so that future searches would efficiently skip over used cards.


##코드 설명 Code

```python
import bisect

N, M, K = map(int, input().split())
init = list(map(int, input().split()))
red = list(map(int, input().split()))

# 이분탐색을 위해 정렬
init.sort()
blue = init[:]

# 유니온-파인드 정의
parent = [i for i in range(M + 2)]

def find(n):
  if parent[n] != n:
    parent[n] = find(parent[n])
  return parent[n]

def union(x, y):
  x_root = find(x)
  y_root = find(y)
  if x_root != y_root:
    parent[x_root] = y_root

# 주어진 카드에 대해서 유니온-파인드 사용
for current in red:
  target = bisect.bisect_right(blue, current)
  result = find(target)
  union(result, result + 1)
  print(blue[result])


## 예시 입력 Sample Input
10 7 5
2 5 3 7 8 4 9
4 1 1 3 8

## 예시 출력 Sample Output
5
2
3
4
9


## 마무리 Conclusion or Reflection
이번 문제는 유니온-파인드를 조금 독특하게 사용했다. 나의 생각의 과정이 점점 정답인 유니온 파인드를 찾아 가게 된다는점에서 성장함을 느꼈다.

In this problem, I applied Union-Find in a somewhat unique way.
I feel a sense of growth in how my thought process gradually led me to this correct and efficient solution using Union-Find.
