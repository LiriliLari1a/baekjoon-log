# Baekjoon No.16724 - 피리 부는 사나이

- [문제 링크](https://www.acmicpc.net/problem/16724)

## 문제 설명 Problem Description

피리 부는 사나이 성우는 오늘도 피리를 분다.
성우가 피리를 불 때면 영과일 회원들은 자기도 모르게 성우가 정해놓은 방향대로 움직이기 시작한다. 성우가 정해놓은 방향은 총 4가지로 U, D, L, R이고 각각 위, 아래, 왼쪽, 오른쪽으로 이동하게 한다.
이를 지켜보던 재훈이는 더 이상 움직이기 힘들어하는 영과일 회원들을 지키기 위해 특정 지점에 ‘SAFE ZONE’ 이라는 최첨단 방음 시설을 만들어 회원들이 성우의 피리 소리를 듣지 못하게 하려고 한다. 
하지만 예산이 넉넉하지 않은 재훈이는 성우가 설정해 놓은 방향을 분석해서 최소 개수의 ‘SAFE ZONE’을 만들려 한다. 
성우가 설정한 방향 지도가 주어졌을 때 재훈이를 도와서 영과일 회원들이 지도 어느 구역에 있더라도 성우가 피리를 불 때 ‘SAFE ZONE’에 들어갈 수 있게 하는 ‘SAFE ZONE’의 최소 개수를 출력하는 프로그램을 작성하시오.

입력
첫 번째 줄에 지도의 행의 수를 나타내는 N(1 ≤ N ≤ 1,000)과 지도의 열의 수를 나타내는 M(1 ≤ M ≤ 1,000)이 주어진다.
두 번째 줄부터 N개의 줄에 지도의 정보를 나타내는 길이가 M인 문자열이 주어진다.
지도 밖으로 나가는 방향의 입력은 주어지지 않는다.

출력
첫 번째 줄에 ‘SAFE ZONE’의 최소 개수를 출력한다.

You are given an N×M grid where each cell contains one of the characters 'U', 'D', 'L', or 'R', indicating the direction a person in that cell will move: up, down, left, or right, respectively.
From any cell, a person will continue to move in the specified direction of each cell they arrive at. To prevent them from moving endlessly, we want to build “SAFE ZONES” — special areas where people stop moving once they enter.
Determine the minimum number of SAFE ZONES needed so that every person starting from any cell in the grid will eventually enter one.

Input
The first line contains two integers N and M (1 ≤ N ≤ 1,000), the number of rows and columns of the grid.
The next N lines each contain a string of M characters representing the grid. Each character is one of 'U', 'D', 'L', 'R'.
No directions will lead outside the grid.

Output
Output a single integer: the minimum number of SAFE ZONES required.


## 생각 과정 Thought Process
1. ** 사이클 **
문제를 보면서 굳이 'SAFE ZONE'이 어딘지 찾아야 할까 생각을 해보았는데 굳이 이 점을 찾지 않고 사이클만 몇개인지 세면 점의 개수를 구할 수 있을 것이라고 생각이 들었다.
사이클 외에도 그 사이클 안으로 향하는 점들의 집합도 그 사이클로 포함 시켜야 계산을 할 수 있단걸 알아냈다.
그래서 DFS와 2차원 행렬을 이용하여 이를 해결했다.

1. ** Cycle **
While looking at the problem, I wondered if it was really necessary to find the exact location of each "SAFE ZONE."
Then I realized that instead of identifying those points, I could simply count the number of cycles to determine the number of zones needed.


##코드 설명 Code

```python
def DFS(start):
  # 입력값에 따른 좌표 변화
  direction = {
    "U" : (-1, 0),
    "D" : (1, 0),
    "L" : (0, -1),
    "R" : (0, 1)
             }

  visited = set()
  stack = [start]
  while stack:
    current = stack.pop()
    if current in visited:    # 사이클 감지
      break
    visited.add(current)
    a, b = current
    if check[a][b]:           # 현재 위치가 저장된 사이클이면
      break
    nxt = direction[board[a][b]]
    da, db = nxt
    na, nb = a + da, b + db
    stack.append((na, nb))
  return visited

N, M = map(int, input().split())

board = []
check = [[False] * (M) for i in range(N)]   # 사이클 저장
for i in range(N):
  c = list(input())
  board.append(c)

count = 0
flag = False
for i in range(N):
  for j in range(M):
    if not check[i][j]:   # 사이클에 포함 되지 않은 위치이면
      found = DFS((i,j)) 
      for v in found:
        a, b = v
        if check[a][b] == True:   # 사이클에 포함 된 위치 이면
          flag = True
        check[a][b] = True
      if not flag:      # 새로운 사이클이면
        count += 1
      flag = False
print(count)


## 예시 입력 Sample Input
3 3
RRL
URL
ULL

## 예시 출력 Sample Output
2


## 마무리 Conclusion or Reflection
문제에서 필요한 부분만 덜어내어 생각하니 어렵지 않은 문제였다. 사이클의 개수를 세는 것은 어렵지 않으므로 문제가 없었고 처음 제출에 시간초과가 있었는데 DFS 내부 함수에서 시간초과가 나는것으로 보아
if check 부분으로 이미 저장된 사이클이면 break 하도록 수정하였더니 널널하게 통과되었다.

I also realized that not only the cycles themselves but also the groups of cells that eventually lead into those cycles should be considered part of the same cycle.
To solve this, I used DFS along with a 2D matrix.
Once I stripped away the unnecessary parts of the problem and focused only on the essential logic, it wasn’t too difficult. Counting the number of cycles itself wasn’t a problem. 
My initial submission ran into a time limit issue, but I noticed the DFS function was causing it.
By adding an if check condition to break early when a cycle had already been recorded, the solution passed comfortably within the time limits.
