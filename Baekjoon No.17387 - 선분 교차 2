# Baekjoon No.17387 - 선분 교차 2

- [문제 링크](https://www.acmicpc.net/problem/17387)

## 문제 설명 Problem Description
첫째 줄에 L1의 양 끝 점 x1, y1, x2, y2가, 둘째 줄에 L2의 양 끝 점 x3, y3, x4, y4가 주어진다.
L1과 L2가 교차하면 1, 아니면 0을 출력한다.

The first line contains the coordinates of the two endpoints of line segment L1: x1 y1 x2 y2.
The second line contains the coordinates of the two endpoints of line segment L2: x3 y3 x4 y4.
Print 1 if L1 and L2 intersect, otherwise print 0.


## 생각 과정 Thought Process
1. ** 케이스 분류 **
이 문제에서는 선분의 기울기에 따라 많은 케이스로 분류해야 된다는것을 알았다. 물론 모든 케이스에 대해서 하나씩 함수를 만들 수 있지만 너무 많은 케이스를 커버하기엔 힘드므로 공식을 만들어 이용했다.

2. ** 계산 **
만나는 지점이 분수로 나타내질 가능성이있어 접점을 직접 구해 풀면 float의 부정확성으로 인해 틀릴 가능성이 있다고 보았다.
그래서 분모를 모두 통째로 날려버린뒤 계산을 시작했다.
일단 주어진 선분의 x범위가 겹치는 범위를 구하고 그 범위 의 양끝에서 y값의 차를 구하고 서로의 부호를 비교했다. 
물론 y값을 구할때는 두식 모두의 분모를 제거해서 계산했다. 그래도 양수와 음수 판별은 가능하므로 비교가 가능하다.
그리고 기울기가 0 또는 INF 인 경우는 점을 회전시켜 float가 되지 않도록 상대적값으로 잘 조정후 계산했다.

1. ** Case Classification **
In this problem, I realized that I needed to classify many different cases depending on the slope of each line segment. 
Although it's possible to create a separate function for each case, handling all of them individually would be too difficult. So instead, I created a general formula that could be applied across cases.

2. ** Calculation **
Since the intersection point could result in fractional values, I avoided calculating it directly. Using floating-point arithmetic could cause precision errors and potentially lead to incorrect results.
To resolve this, I eliminated all denominators in the formula to avoid using division altogether. 
I first found the overlapping x-range between the given segments, then computed the difference in y-values at the two endpoints of this range, using both line equations.
Even without computing the actual y-values, comparing their signs after removing denominators was still reliable and sufficient for determining intersection.
In cases where the slope is 0 or infinity, I rotated the points and adjusted them using relative values to avoid introducing floats during calculations.


##코드 설명 Code
x1, y1, x2, y2 = map(int, input().split())
x3, y3, x4, y4 = map(int, input().split())

def crossed_line(x1, y1, x2, y2, x3, y3, x4, y4):
  # 기울기 분류를 위한 변수
  xDemo_1, xDemo_2 = x2 - x1, x4 - x3
  yDemo_1, yDemo_2 = y2 - y1, y4 - y3

  # 정렬
  def sort_loc(x1, y1, x2, y2, x3, y3, x4, y4):
    if (x1, y1) > (x2, y2):
      x1, y1, x2, y2 = x2, y2, x1, y1
    if (x3, y3) > (x4, y4):
      x3, y3, x4, y4 = x4, y4, x3, y3
    return x1, y1, x2, y2, x3, y3, x4, y4

  # 계산 함수
  def calculation(x1, y1, x2, y2, x3, y3, x4, y4, a, b):
    if a > b:
      return False
    temp_1 = (y2 - y1) * (a - x1) * (x4 - x3) - (y4 - y3) * (a - x3) * (x2 - x1) + (y1 - y3) * (x2 - x1) * (x4 - x3)
    temp_2 = (y2 - y1) * (b - x1) * (x4 - x3) - (y4 - y3) * (b - x3) * (x2 - x1) + (y1 - y3) * (x2 - x1) * (x4 - x3)
    if temp_1 * temp_2 <= 0:
      return True
    else:
      return False

  # 겹침 판단
  def result(x1, y1, x2, y2, x3, y3, x4, y4):
    extent_x = [max(x1, x3), min(x2, x4)]
    if calculation(x1, y1, x2, y2, x3, y3, x4, y4, extent_x[0], extent_x[1]):
      return True
    return False

  # 두 선분 모두 기울기 = INF 또는 두 선분의 기울기가 각각 INF, 0
  if yDemo_1 == 0 and yDemo_2 == 0 or xDemo_1 == 0 and yDemo_2 == 0 or xDemo_2 == 0 and yDemo_1 == 0:
    x1, y1, x2, y2 = x1 - y1, x1 + y1, x2 - y2, x2 + y2
    x3, y3, x4, y4 = x3 - y3, x3 + y3, x4 - y4, x4 + y4

  # 한 선분만 기울기 INF -> 원점을 기준으로 90도 회전
  elif xDemo_1 == 0 or xDemo_2 == 0:
    x1, y1, x2, y2 = y1, -x1, y2, -x2
    x3, y3, x4, y4 = y3, -x3, y4, -x4

  # 최종 계산
  x1, y1, x2, y2, x3, y3, x4, y4 = sort_loc(x1, y1, x2, y2, x3, y3, x4, y4)
  return(result(x1, y1, x2, y2, x3, y3, x4, y4))
  
if crossed_line(x1, y1, x2, y2, x3, y3, x4, y4):
  print(1)
else:
  print(0)


## 예시 입력 Sample Input
0 0 10 0
5 -5 0 0
## 예시 출력 Sample Output
1


## 마무리 Conclusion or Reflection
제출후 많이 틀렸던 문제이다. 시도를 많이해보았고 각 케이스들의 반례를 찾아 헤메는 시간이 좀 길었다. 벡터외적말고 나만의 풀이를 찾아서 조금 성취감이 있었다.
다음부턴 벡터외적을 사용해야겠다.. 왜 벡터외적을 쓰는지 알것같다.

This was a problem I got wrong many times after submitting. I tried various approaches and spent a lot of time searching for counterexamples to different edge cases.
Although I didn’t use the standard cross product method, I felt a sense of accomplishment in developing my own unique solution.
That said, from now on, I’ll probably use vector cross products—I now understand why they’re the standard approach.
