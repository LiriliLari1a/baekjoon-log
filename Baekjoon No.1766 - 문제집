# Baekjoon No.1766 - 문제집

- [문제 링크](https://www.acmicpc.net/problem/1766)


## 문제 설명 Problem Description
N개의 문제는 모두 풀어야 한다.
먼저 푸는 것이 좋은 문제가 있는 문제는, 먼저 푸는 것이 좋은 문제를 반드시 먼저 풀어야 한다.
1번부터 N번까지 난이도는 오름차순이고 가능하면 쉬운 문제부터 풀어야 한다.

첫째 줄에 문제의 수 N(1 ≤ N ≤ 32,000)과 먼저 푸는 것이 좋은 문제에 대한 정보의 개수 M(1 ≤ M ≤ 100,000)이 주어진다. 
둘째 줄부터 M개의 줄에 걸쳐 두 정수의 순서쌍 A,B가 빈칸을 사이에 두고 주어진다. 이는 A번 문제는 B번 문제보다 먼저 푸는 것이 좋다는 의미이다.

첫째 줄에 문제 번호를 나타내는 1 이상 N 이하의 정수들을 풀어야 하는 순서대로 빈칸을 사이에 두고 출력한다.


## 생각 과정 Thought Process
1. ** 위상정렬 **
처음 이문제를 접했을 때 위상정렬을 이용해야 겠다고 생각했다. 마치 줄세우기 문제처럼 보였기 때문이다.
줄세우기와는 다른 순서규칙이 있어서 처음에는 우선순위큐를 사용하지 않고 2차원 리스트로 구현했는데 틀렸다.

2. ** 우선순위 큐 **
문제 난이도 순서로 처리 하되, 문제 푸는 순서 결과를 하나씩 추가할 때마다 풀수 있는 문제가 생길 수 있으므로 우선순위 큐를 사용하여 난이도를 중요도 처럼 관리하도록 했다.
그냥 줄세우기 문제는 큐를 사용했지만 이 문제는 우선순위 큐로 난이도 순서까지 고려하도록 했디.


##코드 설명 Code

```python
import heapq

N, M = map(int, input().split())

graph = { i : [] for i in range(1, N + 1) }
rev_graph = { i : [] for i in range(1, N + 1) }
indegree = [0] * (N + 1)

# 입력 처리 및 진입 차수 처리
for _ in range(M):
  a, b = map(int, input().split())
  graph[a].append(b)
  rev_graph[b].append(a)
  indegree[b] += 1

hq = []

# 진입 차수가 0인 것 우선순위큐에 삽입
for i in range(1, N + 1):
  if not rev_graph[i]:
    heapq.heappush(hq, i)

result = []
# 위상정렬 + 우선순위큐
while hq:
  current = heapq.heappop(hq)
  result.append(current)
  for item in graph[current]:
    indegree[item] -= 1
    if indegree[item] == 0:
      heapq.heappush(hq, item)

print(" ".join(map(str, result)))


## 예시 입력 Sample Input
4 2
1 4
3 2

## 예시 출력 Sample Output
1 3 2 4


## 마무리 Conclusion or Reflection
위상정렬은 이제 직관적으로도 쉽고 다른 활용을 직접 구현해보고 생각하는 것 같아 성장함이 느껴졌다.
