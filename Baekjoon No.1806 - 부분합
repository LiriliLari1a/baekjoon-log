# Baekjoon No.1806 - 부분합

- [문제 링크](https://www.acmicpc.net/problem/1806)

## 문제 설명 Problem Description
10,000 이하의 자연수로 이루어진 길이 N짜리 수열이 주어진다. 이 수열에서 연속된 수들의 부분합 중에 그 합이 S 이상이 되는 것 중, 가장 짧은 것의 길이를 구하는 프로그램을 작성하시오.

첫째 줄에 N (10 ≤ N < 100,000)과 S (0 < S ≤ 100,000,000)가 주어진다. 둘째 줄에는 수열이 주어진다. 수열의 각 원소는 공백으로 구분되어져 있으며, 10,000이하의 자연수이다.
첫째 줄에 구하고자 하는 최소의 길이를 출력한다. 만일 그러한 합을 만드는 것이 불가능하다면 0을 출력하면 된다.

You are given a sequence of length N, consisting of natural numbers less than or equal to 10,000.
Among all the contiguous subarrays of this sequence whose sum is greater than or equal to S, your task is to find the length of the shortest such subarray.

The first line contains two integers, N and S (10 <= N < 100,000 and 0 < S <= 100,000,000).
The second line contains N natural numbers, each less than or equal to 10,000, separated by spaces.
Print the length of the shortest contiguous subarray whose sum is greater than or equal to S.
If no such subarray exists, print 0.

## 생각 과정 Thought Process
1. ** 투 포인터 **
처음에는 부분합을 구하기 위해 투포인터를 각각 start = 0, end = len(line) - 1 에 두고 양끝 점에서 더 작은 값을 pop 하여 구현하려 했다.
하지만 큰 수 옆에 매우 작은 수가 오고 중간 크기의 수가 여러번 반복 될 때 부분합을 제대로 구하지 못한다는 점을 발견하여 포인터를 모두 0에 놓고 시작하는 방향으로 구현했다.

2. ** 슬라이싱 윈도우 **
두개의 포인터를 모두 0에 놓고 슬라이싱 윈도우를 하기로 했다.
부분합의 길이인 min_length를 inf 로 초기화하고 부분합 값인 total 변수가 S보다 크거나 같으면 start 인덱스를 1 증가시켜 total 값을 줄였다.
반대로 total 변수가 S보다 작으면 end 인덱스를 1 증가시켜 total 값을 늘렸다. 이 줄이고 늘이는 과정에서 while 문에 end 가 입력된 수열의 인덱스 마지막을 넘어서 접근했을 때
종료되도록 while 조건문에 이를 걸어놨는데 end 인덱스가 마지막을 가리킬 때 start 인덱스를 증가시키지 못하는 일이 생겨서 따로 처리했다.

1. ** Two Pointers **
At first, I tried placing the two pointers at start = 0 and end = len(line) - 1, and removing the smaller value from either end to calculate the subarray sum.
However, I realized that this approach doesn't work properly when a large number is followed by very small ones or when medium-sized numbers are repeated.
So I changed the approach to start both pointers at 0.

2. ** Sliding Window **
I placed both pointers at 0 and used a sliding window technique. 
I initialized the minimum length (min_length) to a very large value like inf. 
If the running sum (total) was greater than or equal to S, I increased the start index to reduce the total. If total was less than S,
I increased the end index to expand the window and increase the sum.



##코드 설명 Code

```python
N, S = map(int, input().split())

line = list(map(int, input().split()))

start = end = 0           # 투포인터
total = 0                 # 부분합 값
min_length = float('inf') # 부분합 길이


while True:
  # 부분합 값이 S 보다 크거나 같으면 start 인덱스 + 1
  if total >= S:
    min_length = min(min_length, end - start)
    total -= line[start]
    start += 1
  # line 인덱스 초과시 종료
  elif end == N: # 따로 처리
    break
  # 부분합 값이 S 보다 작으면 end 인덱스 + 1
  else:
    total += line[end]
    end += 1

# 부분합 값을 찾지 못했을때 출력
if min_length == float('inf'):
  print(0)
# 출력
else:
  print(min_length)


## 예시 입력 Sample Input
10 15
5 1 1 1 1 3 3 3 3 3

## 예시 출력 Sample Output
5

## 마무리 Conclusion or Reflection
슬라이싱 윈도우를 사용하면 어렵지 않은 문제였다. 투포인터의 값을 초기화 하는 과정에서 사고 실수를 조금 해서 첫 제출은 틀렸지만, 구현하는데에 큰 어려움을 겪진 않았다.
사실 슬라이싱 윈도우가 익숙 하진 않아서 투 포인터 값을 초기화 할때 무조건 start 첫 인덱스, end 는 마지막 인덱스를 가리키게 해왔는데 투포인터를 둘다 0에 두는 조금 유연한 방법을
새로 배웠다.

Using the sliding window technique, the problem wasn't too difficult to solve. 
I made a small mistake in initializing the two-pointer values, which caused my first submission to be incorrect, but overall, 
I didn’t have much trouble with the implementation.
To be honest, I’m not that familiar with the sliding window approach, so I used to always initialize start to the first index and end to the last index.
However, through this problem, I learned a more flexible approach—starting both pointers at index 0.
