# Baekjoon No.20303 - 할로윈의 양아치

- [문제 링크](https://www.acmicpc.net/problem/20303)

## 문제 설명 Problem Description
첫째 줄에는 아이의 수 N, 아이들 사이의 친구 관계 수 M, 그리고 가져갈 수 있는 아이 수의 최대치 K가 공백으로 구분되어 주어집니다.
그 다음 줄에는 각 아이가 가지고 있는 사탕의 수가 공백으로 구분되어 N개 주어집니다.
그 다음 M개의 줄에는 서로 친구인 두 아이의 번호가 공백으로 구분되어 M쌍 주어집니다. 친구 관계는 양방향이며, 각 줄은 두 정수 a와 b로 이루어져 있고 이는 a번 아이와 b번 아이가 친구임을 의미합니다.
가져갈 수 있는 아이 수가 K명을 넘지 않도록 하면서 얻을 수 있는 사탕 수의 최댓값을 출력합니다.


## 생각 과정 Thought Process
1. ** 그룹화 **
한명을 지목하면 그 사람의 친구들은 모두 연결되어 생각하여야 하므로 일단 그룹화를 했다. 연결된 친구의 수와 그 연결된 친구들의 모든 사탕의 합으로 그룹화했다.

2. ** 동적 계획법 **
공명을 하기위한 아이들의 최소 수가 주어졌으므로 그 미만의 수로 아이를 잡되 가장 많은 사탕의 수를 구해야 하므로 배낭 문제와 비슷하여 동적 계획법을 이용하였다.


##코드 설명 Code

```python
from collections import deque

# 너비우선탐색 후 탐색 범위 리턴
def bfs(start, grouped):
  visited = []
  queue = deque([start])
  visited.append(start)
  grouped[start] = True
  while queue:
    friend = queue.popleft()
    for other_friends in friends[friend]:
      if not grouped[other_friends]:
        queue.append(other_friends)
        grouped[other_friends] = True
        visited.append(other_friends)

  return visited

N, M, K = map(int, input().split())
candy = [0] + list(map(int, input().split()))

grouped = [False] * (N + 1)   # 그룹 완성 여부
friends = { i : [] for i in range(1, N + 1) }   # 친구 그래프
for _ in range(M):
  a, b = map(int, input().split())
  friends[a].append(b)
  friends[b].append(a)

group = []
candies = []

# 그룹 명수와 그 그룹안에 포함된 사탕 수 저장  
for i in range(1, N + 1):
  if grouped[i]:
    continue
  total = 0
  temp = bfs(i, grouped)
  for friend in temp:
    total += candy[friend]
  group.append(len(temp))
  candies.append(total)

dp = [0] * (K)
# 배낭 문제 기반 동적계획법
for i in range(len(candies)):
  for j in range(K - 1, group[i] - 1, -1):
    dp[j] = max(dp[j - group[i]] + candies[i], dp[j])

print(dp[-1])


## 예시 입력 Sample Input
5 1 4
9 10 1 5 4
1 2

## 예시 출력 Sample Output
24


## 마무리 Conclusion or Reflection
어려운 문제는 아니었다. 모두 익숙한 구조로 그룹화 + 동적 계획법이라는 응용인것 외에는 특별함이 없는 간단한 문제였다.
