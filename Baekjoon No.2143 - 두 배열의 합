# Baekjoon No.2143 - 두 배열의 합

- [문제 링크](https://www.acmicpc.net/problem/2143)


## 문제 설명 Problem Description
A의 부 배열의 합에 B의 부 배열의 합을 더해서 T가 되는 모든 부 배열 쌍의 개수를 구하는 프로그램을 작성하시오.
첫째 줄에 T(-1,000,000,000 ≤ T ≤ 1,000,000,000)가 주어진다. 다음 줄에는 n(1 ≤ n ≤ 1,000)이 주어지고,
그 다음 줄에 n개의 정수로 A[1], …, A[n]이 주어진다. 다음 줄에는 m(1 ≤ m ≤ 1,000)이 주어지고, 그 다음 줄에 m개의 정수로 B[1], …, B[m]이 주어진다. 
각각의 배열 원소는 절댓값이 1,000,000을 넘지 않는 정수이다.
첫째 줄에 답을 출력한다. 가능한 경우가 한 가지도 없을 경우에는 0을 출력한다.

Given two integer arrays A and B, and an integer T, count the number of pairs of subarrays (one from A and one from B) such that the sum of the subarray from A plus the sum of the subarray from B equals T.
Input:
An integer T (−1,000,000,000 ≤ T ≤ 1,000,000,000)
An integer n (1 ≤ n ≤ 1,000), followed by n integers A[1] to A[n]
An integer m (1 ≤ m ≤ 1,000), followed by m integers B[1] to B[m]
Each array element has absolute value ≤ 1,000,000
Output:
The number of valid subarray pairs whose sums add up to T.
If there are no such pairs, print 0.


## 생각 과정 Thought Process
1. ** 딕셔너리 **
처음에는 수열의 값을 기반으로 한 딕셔너리를 만들어 구현하려 했으나 메모리쪽 부분에서 문제가 생길 것 같아 포기했다.

2. ** 합의 경우의수 리스트 **
주어진 수열은 정렬하면 안되지만(부분수열이므로 인덱스가 연속이어야 함), 합의 경우의 수를 만들면 오름차순으로도 정렬하여 이분탐색을 구현하는데에 용이 할 것같아 합의 경우의수로 리스트를 작성하기로 했다.
2중 for 루프로 0과 마지막 인덱스까지 부터 시작하는 합을 모두 리스트에 저장하였다.

3. ** 이분 탐색 **
합의 경우의수 리스트를 구현 하고 오름차순으로 정렬 한 후 다른 리스트에서 하나씩 값을 뽑아 (T - 값) 하여 이분탐색으로 찾으려 했다. 처음에는 이분탐색을 손으로 직접 구현했는데 리스트의 길이가 최대 일때(500,000) 시간이 많이 걸려 bisect 를 이용하였다.
bisect_right 는 target 보다 큰값이 나오는 첫번째 위치를 반환하고 target_left 는 target 의 위치 또는 들어갈 위치를 반환한다. 그래서 서로의 차를 구하면 그안에 몇개의 target 값이 있는지 알 수 있다.

1. ** Dictionary Approach **
At first, I considered using a dictionary to count subarray sums, but I realized it might lead to memory issues due to the problem’s tight 64MB constraint.

2. ** Generating All Possible Subarray Sums **
Since subarrays must be contiguous, I couldn’t sort the original arrays directly. 
Instead, I created lists of all possible subarray sums for both arrays using two nested loops. These lists could then be sorted for efficient binary search.

3. ** Binary Search with Bisect **
After sorting one of the subarray sum lists, I iterated through the other and used bisect_left and bisect_right to count how many times T - x appears. 
This is an efficient way to count matching subarrays using binary search, especially when the list size can reach up to 500,000.


##코드 설명 Code

```python
from bisect import bisect_left, bisect_right

# 모든 합의 경우의 수를 구함
def get_sum(lst):
  r = []
  for i in range(len(lst)):
    total = 0
    for j in range(i, len(lst)):
      total += lst[j]
      r.append(total)
  return r

# 이분 탐색 기반으로 리스트안에 찾아야 하는 수가 몇개있는지 반환
def get_target(lst, target):
    return bisect_right(lst, target) - bisect_left(lst, target)


T = int(input())
n = int(input())
A = list(map(int, input().split()))
m = int(input())
B = list(map(int, input().split()))
a = []
b = []

# 합의 개수가 한개인 것 먼저 저장
for i in range(len(A)):
  a.append(A[i])
for i in range(len(B)):
  b.append(B[i])

# 합의 개수가 두개 이상 저장
a = get_sum(A)
b = get_sum(B)
b.sort()    # 오름차순

result = 0
for t in a:
  result += get_target(b, T - t)

print(result)


## 예시 입력 Sample Input
55
15
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
15
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

## 예시 출력 Sample Output
104


## 마무리 Conclusion or Reflection
처음에는 어떻게 풀어야 할지 막막 했는데 딕셔너리를 사용하려다가 메모리 제한이 64MB 인것을 보고 경악 한 후 여러 경우를 생각해보다가 뭔가 정렬이 너무 하고 싶다는 생각을 강하게 했다. 
이 정렬을 실행 시키려면 수열의 순서를 지켜야 하는데 그 순서를 지켜주려면 합의 경우의 수 리스트 밖에 없었다.
그 뒤 정렬을 시킨 후에는 쉽게 이분탐색으로 해당 값을 찾을 수 있었다.

Initially, I was overwhelmed and unsure how to approach the problem. I wanted to use sorting, but since the order of elements in subarrays must be preserved, 
the only viable option was to sort the subarray sum list instead. Once I had that, applying binary search made the rest of the solution straightforward.
