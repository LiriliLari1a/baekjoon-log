# Baekjoon No.2252 - 줄 세우기

- [문제 링크](https://www.acmicpc.net/problem/2252)


## 문제 설명 Problem Description
첫째 줄에 N(1 ≤ N ≤ 32,000), M(1 ≤ M ≤ 100,000)이 주어진다. M은 키를 비교한 횟수이다. 다음 M개의 줄에는 키를 비교한 두 학생의 번호 A, B가 주어진다. 이는 학생 A가 학생 B의 앞에 서야 한다는 의미이다. 학생들의 번호는 1번부터 N번이다.
첫째 줄에 학생들을 앞에서부터 줄을 세운 결과를 출력한다. 답이 여러 가지인 경우에는 아무거나 출력한다.

Given N students and M comparisons indicating that student A must stand in front of student B, output one possible valid ordering of the students from front to back based on the comparisons.
N(1 ≤ N ≤ 32,000), M(1 ≤ M ≤ 100,000)


## 생각 과정 Thought Process
1. ** 위상 정렬 **
아이패드에 학생들의 정보를 딕셔너리로 받는다고 가정하고 메모를 하다 진입차수의 개념이 떠올라 위상정렬을 사용하기로 했다.
진입차수가 0이면 즉, 남은 학생중 그 학생의 키가 다른 학생보다 작지 않다는 뜻이다. indegree 리스트에 그 학생보다 키가 큰 학생 수를 저장 해 놓고 진입 차수로 사용하였다.

1. ** Topological Sort **
While taking notes on an iPad and storing student information in a dictionary, I recalled the concept of in-degree and decided to use topological sorting.
If a student has an in-degree of 0, it means there's no other student left who is taller than them. I used an indegree list to store the number of taller students for each student.


##코드 설명 Code

```python
from collections import deque

N, M = map(int, input().split())

student = { i : [] for i in range(1, N + 1) }   # key번 학생의 키 > value번 학생의 키
indegree = [0] * (N + 1)

for i in range(M):
  A, B = map(int, input().split())
  student[A].append(B)
  indegree[B] += 1

result = []
queue = deque([])
for i in range(1, N + 1):
  # 진입차수가 0 이면 큐에 삽입
  if indegree[i] == 0:
    queue.append(i)

while queue:
  current = queue.popleft()
  result.append(current)
  # current 보다 키가 큰 학생 진입 차수 감소
  for value in student[current]:
    indegree[value] -= 1
    if indegree[value] == 0:    # 진입차수가 0 이면 큐에 삽입
      queue.append(value)

print(" ".join(map(str, result)))


## 예시 입력 Sample Input
9 9
1 9
1 3
1 4
1 2
2 5
2 6
5 7
5 8
9 7

## 예시 출력 Sample Output
1 9 3 4 2 5 6 7 8


## 마무리 Conclusion or Reflection
휴가를 다녀와서 살짝 감을 잃었을까봐 살짝 긴장하고 풀었다. 그런데 위상정렬을 사용해야겠다 생각 한후 바로 풀어버렸는데 위상정렬도 까다로운 위상정렬도 아니고 개념만 알면 사용하기 쉬운 문제였다.

Since I just came back from vacation, I was a bit nervous that I might have lost my touch. But once I realized this problem required topological sorting, 
I solved it right away. It wasn’t a complicated topological sort either—just a straightforward one that’s easy to apply once you understand the concept.
