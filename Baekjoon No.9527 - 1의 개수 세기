# Baekjoon No.9527 - 1의 개수 세기

- [문제 링크](https://www.acmicpc.net/problem/9527)

## 문제 설명 Problem Description
두 자연수 A, B가 주어졌을 때, A ≤ x ≤ B를 만족하는 모든 x에 대해 x를 이진수로 표현했을 때 1의 개수의 합을 구하는 프로그램을 작성하시오.
첫 줄에 두 자연수 A, B가 주어진다. (1 ≤ A ≤ B ≤ 10^16)
1의 개수를 세어 출력한다.

Given two natural numbers A and B, write a program to calculate the total number of 1's in the binary representations of all integers x that satisfy A ≤ x ≤ B.
The first line contains two natural numbers A and B. (1 ≤ A ≤ B ≤ 10¹⁶)
Print the total number of 1's in the binary representations of all integers from A to B, inclusive.


## 생각 과정 Thought Process
1. ** 반복 패턴 **
범위가 넓어 비트의 수를 세면 시간초과가 될거라고 생각하여 시간복잡도를 log 로 줄이는 방법으로 생각을 해보았다. 이진수를 써내려가며 1의 개수 패턴이 2^n 으로 n이 증가할때마다 반복되는것을 찾았다.
그래서 이런방법으로 구하면 시간복잡도가 약 O(log A) or O(log B) 로 나올것으로 예상하여 이를 수학적으로 구현하기로 했다.
일단 반복되는 패턴으로 점화식을 세워 입력 범위를 모두 포함할 수 있도록 1의 개수를 미리 계산한 ones 리스트를 작성하였다. 리스트의 길이는 55로 시간 및 메모리 문제는 생기지 않는다.

2. ** 범위 **
이 패턴을 이용하는 방법이 여러 시각으로 보았을 때 다양해서 가장 쉬운 방법을 찾기로 했다. A와 B가 주어지고 이 범위안의 1의 개수를 구하면 되므로 최적화를 위해 일단 A와 B사이의 1의 개수를 통째로 구했다.
이후에 조정을 통해 범위를 맞추면 된다고 생각하면 된다.

3. ** 재귀 **
조정을 통해 범위를 맞추려 했는데 시간초과가 났다. 왜냐하면 이렇게 탐색 범위를 줄여도 2의 n제곱으로 증가하는 조정하려는 범위의 크기가 증가하면 소용이 없었던 것이다.
그래서 이 조정도 위에 범위를 구하는 것 처럼 log 적으로 구해야 겠다고 생각을했다. 
일단 처음에 범위를 구할 때 생기는 좌측의 1 (1000...000)이 생겨 계산이 조금 복잡해졌다. 한번 반복패턴으로 범위를 잡을 때 마다 1000...000 -> 1100...000 -> 1110...000 이런식으로 좌측의 1의 개수가 증가하여 count 변수로 이를 계산했다.
또한 누적합을 사용해야하는데 미리 구한 ones 리스트를 이용해도 되긴 하는데 합을 계속 더하면 시간적으로 문제가 생길 것 같아. 미리 누적합인 perfix 리스트를 새로 만들었다.
이를 이용하여 여러 조정을 거쳐 재귀 함수를 완성 했다.

4. ** 나머지 처리 **
재귀를 통해 숫자가 충분히 작아지면 직접 계산하도록 구현했다. 더이상 계산을 log 로 줄여도 효율적이지 않고 좀더 직관적으로 보이도록 8개 미만인 경우 까지 재귀를 하여 범위를 좁힌 후 계산했다.

1. ** Repeating Pattenrs **
Since the range is very large, I assumed that simply counting the number of 1s in binary would lead to a time limit exceeded error. So I thought of reducing the time complexity to around logarithmic time using patterns.
While writing out binary numbers, I noticed that the number of 1s follows a repeating pattern as powers of 2 increase (i.e., as n increases in 2^n).
Using this insight, I aimed to mathematically implement a solution with a time complexity of approximately O(log A) or O(log B).
First, I created a ones list that precomputes the number of 1s for all powers of two up to the maximum possible input range. Since the list only needs to be of length 55, it doesn't cause any time or memory issues.

2. ** Range Handling **
There are many ways to utilize the repeating pattern, but I decided to go with the most straightforward method.
Given A and B, we want to count the number of 1s in the binary representations of all numbers in the range [A, B].
To optimize, I first computed the total number of 1s between A and B as a whole.
Then, I planned to adjust the boundaries afterward to match the exact range. This idea simplifies the implementation.

3. ** Recursive Refinement **
Initially, I tried adjusting the boundaries directly, but it resulted in a time limit exceeded.
The reason was that even though the search space was reduced, the size of the adjusted segments still grew exponentially (as powers of 2), rendering the approach ineffective.
So I realized that this refinement process also needed to be done logarithmically, just like the main range calculation.
While adjusting the boundaries, the presence of leading 1s (e.g., 1000...000) made things more complicated.
As the pattern repeatedly adjusted the boundaries, the binary representation evolved like 1000...000 → 1100...000 → 1110...000, and so on.
To keep track of this, I introduced a count variable to represent the number of leading 1s.
I also realized that I needed a prefix sum for efficient range calculations. While I could use the existing ones list, repeatedly summing values could still be a performance issue,
so I built a separate prefix list to store the cumulative sums.

4. ** Handling the Remainder **
Once the number range becomes sufficiently small through recursion, I implemented a direct calculation step.
At that point, further reducing the size logarithmically wouldn’t provide much benefit, and handling it directly becomes more intuitive.
So, I narrowed down the range using recursion until the size was less than 8, and then manually calculated the remaining values to complete the result.


##코드 설명 Code

```python
# 입력 범위 [0, 2 ^ MAX_bit)
MAX_bit = 55
# 2의 제곱 주기로 나타나는 사이클로 재귀 사용
# offset : 범위, count : 좌측에 붙어 있는 1 개수
def exp_cycle(offset, count):
  bit_range = 0
  offset -= 1   # 100...000 처리
  while offset >= 2 ** (bit_range + 1):
    bit_range += 1
  remain = offset - 2 ** bit_range + 1    # 남은 범위
  total = perfix[bit_range-1] + count * (2 ** bit_range)    # 1의 개수 리턴
  return total, remain

# 주어진 숫자 N에 대해 해당하는 2의 제곱수 구간의 지수 값 구하기
def get_exponent(N):
  exp = 0
  while N >= 2 ** (exp + 1):
    exp += 1
  return exp

# ones[n]에서 2^n ~ 2^(n + 1) - 1 까지의 1의 개수를 구함 (점화식을 이용)
ones = [0] * MAX_bit
ones[0], ones[1] = 1, 1
for i in range(2, MAX_bit):
  ones[i] = ones[i - 1] * 2 + 2 ** (i - 1)
for i in range(1, MAX_bit):
  ones[i] += 2 ** i

# perfix 에서 누적합을 구함
perfix = [0] * MAX_bit
perfix[0] = 1
for i in range(1, MAX_bit):
  perfix[i] = perfix[i - 1] + ones[i]

A, B = map(int, input().split())

# A와 B의 지수 범위 확인
exp_A = get_exponent(A)
exp_B = get_exponent(B)

# [A <= 중간 구간 < B] 1의 개수 통째로 더하기
result = 0
for i in range(exp_A, exp_B):
  result += ones[i]

# A, B가 포함된 부분의 시작점에서 상대 위치 계산
offset_a, offset_b = A - 2 ** exp_A, B - 2 ** exp_B + 1

count = 1   # 1000...000 <- 좌측 1의 개수 1개
# A쪽 잔여 계산
while offset_a > 4:
  total, offset_a  = exp_cycle(offset_a, count)
  count += 1
  result -= total

# 4개 이하의 나머지는 직접 계산
for i in range(offset_a):
  result -= (count + bin(i).count('1'))

# B쪽 잔여 계산
count = 1
while offset_b > 4:
  total, offset_b = exp_cycle(offset_b, count)
  count += 1
  result += total

for i in range(offset_b):
  result += (count + bin(i).count('1'))

print(result)


## 예시 입력 Sample Input
1023 1025

## 예시 출력 Sample Output
13


## 마무리 Conclusion or Reflection
정석 풀이는 직접 비트를 이용하여 누적된 B 까지의 비트 합 - 누적된 A-1 까지의 비트 합으로 구현한다. 하지만 메모를 통해 패턴을 확인한 후 구현할 수 있다는 확신을 갖고 구현 해 보았는데 O(log (A or b)) 구현에 성공했다.
수학적 구현이라는게 조금 계산적으로 까다로웠지만 생각보단 쉽게 구현했다는 것이 보람차다.

With these components, I was able to build a recursive function that computes the desired count efficiently.
The standard solution usually involves direct bit manipulation and computing f(B) - f(A - 1), where f(x) is the cumulative count of 1s from 1 to x.
However, I was confident that I could derive and implement the same result based on observed patterns and memoization.
In the end, I successfully achieved an O(log A or B) implementation.
Although the math-heavy implementation was slightly tricky, it turned out to be easier than I initially expected, making the process quite rewarding.
